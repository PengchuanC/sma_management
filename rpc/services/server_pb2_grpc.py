# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rpc.services.funds_pb2 as funds__pb2


class RpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FundCategoryHandler = channel.unary_unary(
                '/rpc.RpcService/FundCategoryHandler',
                request_serializer=funds__pb2.FundCategoryRequest.SerializeToString,
                response_deserializer=funds__pb2.FundCategoryResponse.FromString,
                )
        self.FundBasicInfoHandler = channel.unary_unary(
                '/rpc.RpcService/FundBasicInfoHandler',
                request_serializer=funds__pb2.FundBasicInfoRequest.SerializeToString,
                response_deserializer=funds__pb2.FundBasicInfoResponse.FromString,
                )


class RpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FundCategoryHandler(self, request, context):
        """获取基金类型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FundBasicInfoHandler(self, request, context):
        """获取基金基础信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FundCategoryHandler': grpc.unary_unary_rpc_method_handler(
                    servicer.FundCategoryHandler,
                    request_deserializer=funds__pb2.FundCategoryRequest.FromString,
                    response_serializer=funds__pb2.FundCategoryResponse.SerializeToString,
            ),
            'FundBasicInfoHandler': grpc.unary_unary_rpc_method_handler(
                    servicer.FundBasicInfoHandler,
                    request_deserializer=funds__pb2.FundBasicInfoRequest.FromString,
                    response_serializer=funds__pb2.FundBasicInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc.RpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FundCategoryHandler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.RpcService/FundCategoryHandler',
            funds__pb2.FundCategoryRequest.SerializeToString,
            funds__pb2.FundCategoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FundBasicInfoHandler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.RpcService/FundBasicInfoHandler',
            funds__pb2.FundBasicInfoRequest.SerializeToString,
            funds__pb2.FundBasicInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
