# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import services.sync_pb2 as sync__pb2
import services.transfer_pb2 as transfer__pb2


class ServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/services.Server/Ping',
                request_serializer=sync__pb2.PingRequest.SerializeToString,
                response_deserializer=sync__pb2.PingResponse.FromString,
                )
        self.SyncAll = channel.unary_unary(
                '/services.Server/SyncAll',
                request_serializer=sync__pb2.Request.SerializeToString,
                response_deserializer=sync__pb2.Response.FromString,
                )
        self.SyncPrimary = channel.unary_unary(
                '/services.Server/SyncPrimary',
                request_serializer=sync__pb2.Request.SerializeToString,
                response_deserializer=sync__pb2.Response.FromString,
                )
        self.SMAPortfolio = channel.unary_stream(
                '/services.Server/SMAPortfolio',
                request_serializer=transfer__pb2.NULL.SerializeToString,
                response_deserializer=transfer__pb2.Portfolio.FromString,
                )
        self.SMAPortfolioExpanded = channel.unary_stream(
                '/services.Server/SMAPortfolioExpanded',
                request_serializer=transfer__pb2.NULL.SerializeToString,
                response_deserializer=transfer__pb2.PortfolioExpanded.FromString,
                )
        self.SMABalance = channel.unary_stream(
                '/services.Server/SMABalance',
                request_serializer=transfer__pb2.TRequest.SerializeToString,
                response_deserializer=transfer__pb2.Balance.FromString,
                )
        self.SMABalanceExpanded = channel.unary_stream(
                '/services.Server/SMABalanceExpanded',
                request_serializer=transfer__pb2.TRequest.SerializeToString,
                response_deserializer=transfer__pb2.BalanceExpanded.FromString,
                )
        self.SMAIncome = channel.unary_stream(
                '/services.Server/SMAIncome',
                request_serializer=transfer__pb2.TRequest.SerializeToString,
                response_deserializer=transfer__pb2.Income.FromString,
                )
        self.SMAIncomeAsset = channel.unary_stream(
                '/services.Server/SMAIncomeAsset',
                request_serializer=transfer__pb2.TRequest.SerializeToString,
                response_deserializer=transfer__pb2.IncomeAsset.FromString,
                )
        self.SMAHolding = channel.unary_stream(
                '/services.Server/SMAHolding',
                request_serializer=transfer__pb2.TRequest.SerializeToString,
                response_deserializer=transfer__pb2.Holding.FromString,
                )
        self.SMATransaction = channel.unary_stream(
                '/services.Server/SMATransaction',
                request_serializer=transfer__pb2.TRequest.SerializeToString,
                response_deserializer=transfer__pb2.Transaction.FromString,
                )
        self.SMADetailFee = channel.unary_stream(
                '/services.Server/SMADetailFee',
                request_serializer=transfer__pb2.TRequest.SerializeToString,
                response_deserializer=transfer__pb2.DetailFee.FromString,
                )
        self.SMASecurity = channel.unary_stream(
                '/services.Server/SMASecurity',
                request_serializer=transfer__pb2.TRequest.SerializeToString,
                response_deserializer=transfer__pb2.Security.FromString,
                )
        self.SMASecurityQuote = channel.unary_stream(
                '/services.Server/SMASecurityQuote',
                request_serializer=transfer__pb2.TRequest.SerializeToString,
                response_deserializer=transfer__pb2.SecurityQuote.FromString,
                )
        self.SMABenchmark = channel.unary_stream(
                '/services.Server/SMABenchmark',
                request_serializer=transfer__pb2.TRequest.SerializeToString,
                response_deserializer=transfer__pb2.ValuationBenchmark.FromString,
                )
        self.SMAInterestTax = channel.unary_stream(
                '/services.Server/SMAInterestTax',
                request_serializer=transfer__pb2.TRequest.SerializeToString,
                response_deserializer=transfer__pb2.InterestTax.FromString,
                )


class ServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncAll(self, request, context):
        """同步全部数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncPrimary(self, request, context):
        """同步关键数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMAPortfolio(self, request, context):
        """SMA数据传输服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMAPortfolioExpanded(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMABalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMABalanceExpanded(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMAIncome(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMAIncomeAsset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMAHolding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMATransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMADetailFee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMASecurity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMASecurityQuote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMABenchmark(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMAInterestTax(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=sync__pb2.PingRequest.FromString,
                    response_serializer=sync__pb2.PingResponse.SerializeToString,
            ),
            'SyncAll': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncAll,
                    request_deserializer=sync__pb2.Request.FromString,
                    response_serializer=sync__pb2.Response.SerializeToString,
            ),
            'SyncPrimary': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncPrimary,
                    request_deserializer=sync__pb2.Request.FromString,
                    response_serializer=sync__pb2.Response.SerializeToString,
            ),
            'SMAPortfolio': grpc.unary_stream_rpc_method_handler(
                    servicer.SMAPortfolio,
                    request_deserializer=transfer__pb2.NULL.FromString,
                    response_serializer=transfer__pb2.Portfolio.SerializeToString,
            ),
            'SMAPortfolioExpanded': grpc.unary_stream_rpc_method_handler(
                    servicer.SMAPortfolioExpanded,
                    request_deserializer=transfer__pb2.NULL.FromString,
                    response_serializer=transfer__pb2.PortfolioExpanded.SerializeToString,
            ),
            'SMABalance': grpc.unary_stream_rpc_method_handler(
                    servicer.SMABalance,
                    request_deserializer=transfer__pb2.TRequest.FromString,
                    response_serializer=transfer__pb2.Balance.SerializeToString,
            ),
            'SMABalanceExpanded': grpc.unary_stream_rpc_method_handler(
                    servicer.SMABalanceExpanded,
                    request_deserializer=transfer__pb2.TRequest.FromString,
                    response_serializer=transfer__pb2.BalanceExpanded.SerializeToString,
            ),
            'SMAIncome': grpc.unary_stream_rpc_method_handler(
                    servicer.SMAIncome,
                    request_deserializer=transfer__pb2.TRequest.FromString,
                    response_serializer=transfer__pb2.Income.SerializeToString,
            ),
            'SMAIncomeAsset': grpc.unary_stream_rpc_method_handler(
                    servicer.SMAIncomeAsset,
                    request_deserializer=transfer__pb2.TRequest.FromString,
                    response_serializer=transfer__pb2.IncomeAsset.SerializeToString,
            ),
            'SMAHolding': grpc.unary_stream_rpc_method_handler(
                    servicer.SMAHolding,
                    request_deserializer=transfer__pb2.TRequest.FromString,
                    response_serializer=transfer__pb2.Holding.SerializeToString,
            ),
            'SMATransaction': grpc.unary_stream_rpc_method_handler(
                    servicer.SMATransaction,
                    request_deserializer=transfer__pb2.TRequest.FromString,
                    response_serializer=transfer__pb2.Transaction.SerializeToString,
            ),
            'SMADetailFee': grpc.unary_stream_rpc_method_handler(
                    servicer.SMADetailFee,
                    request_deserializer=transfer__pb2.TRequest.FromString,
                    response_serializer=transfer__pb2.DetailFee.SerializeToString,
            ),
            'SMASecurity': grpc.unary_stream_rpc_method_handler(
                    servicer.SMASecurity,
                    request_deserializer=transfer__pb2.TRequest.FromString,
                    response_serializer=transfer__pb2.Security.SerializeToString,
            ),
            'SMASecurityQuote': grpc.unary_stream_rpc_method_handler(
                    servicer.SMASecurityQuote,
                    request_deserializer=transfer__pb2.TRequest.FromString,
                    response_serializer=transfer__pb2.SecurityQuote.SerializeToString,
            ),
            'SMABenchmark': grpc.unary_stream_rpc_method_handler(
                    servicer.SMABenchmark,
                    request_deserializer=transfer__pb2.TRequest.FromString,
                    response_serializer=transfer__pb2.ValuationBenchmark.SerializeToString,
            ),
            'SMAInterestTax': grpc.unary_stream_rpc_method_handler(
                    servicer.SMAInterestTax,
                    request_deserializer=transfer__pb2.TRequest.FromString,
                    response_serializer=transfer__pb2.InterestTax.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.Server/Ping',
            sync__pb2.PingRequest.SerializeToString,
            sync__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SyncAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.Server/SyncAll',
            sync__pb2.Request.SerializeToString,
            sync__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SyncPrimary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.Server/SyncPrimary',
            sync__pb2.Request.SerializeToString,
            sync__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SMAPortfolio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/services.Server/SMAPortfolio',
            transfer__pb2.NULL.SerializeToString,
            transfer__pb2.Portfolio.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SMAPortfolioExpanded(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/services.Server/SMAPortfolioExpanded',
            transfer__pb2.NULL.SerializeToString,
            transfer__pb2.PortfolioExpanded.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SMABalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/services.Server/SMABalance',
            transfer__pb2.TRequest.SerializeToString,
            transfer__pb2.Balance.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SMABalanceExpanded(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/services.Server/SMABalanceExpanded',
            transfer__pb2.TRequest.SerializeToString,
            transfer__pb2.BalanceExpanded.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SMAIncome(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/services.Server/SMAIncome',
            transfer__pb2.TRequest.SerializeToString,
            transfer__pb2.Income.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SMAIncomeAsset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/services.Server/SMAIncomeAsset',
            transfer__pb2.TRequest.SerializeToString,
            transfer__pb2.IncomeAsset.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SMAHolding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/services.Server/SMAHolding',
            transfer__pb2.TRequest.SerializeToString,
            transfer__pb2.Holding.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SMATransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/services.Server/SMATransaction',
            transfer__pb2.TRequest.SerializeToString,
            transfer__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SMADetailFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/services.Server/SMADetailFee',
            transfer__pb2.TRequest.SerializeToString,
            transfer__pb2.DetailFee.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SMASecurity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/services.Server/SMASecurity',
            transfer__pb2.TRequest.SerializeToString,
            transfer__pb2.Security.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SMASecurityQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/services.Server/SMASecurityQuote',
            transfer__pb2.TRequest.SerializeToString,
            transfer__pb2.SecurityQuote.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SMABenchmark(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/services.Server/SMABenchmark',
            transfer__pb2.TRequest.SerializeToString,
            transfer__pb2.ValuationBenchmark.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SMAInterestTax(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/services.Server/SMAInterestTax',
            transfer__pb2.TRequest.SerializeToString,
            transfer__pb2.InterestTax.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
